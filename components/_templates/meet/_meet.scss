@use "tokens.web" as tokens;
@use "mixins/layout";
@use "mixins/theme";
@use "mixins/typography";
@use "mixins/media";

.sbt-meet {
	$self: &;
	$breakpointMid: 50em;
	$breakpointUpper: 60em;
	$leftMarginWidth: 14%;
	$leftMarginTextureWidth: 2em;
	$colGutterWidth: 1em;
	$rowGutterWidth: tokens.$grid-gutter / 2;
	&__inner {
		display: grid;
		grid-template-columns: $colGutterWidth auto $colGutterWidth;
		grid-template-rows: auto $rowGutterWidth auto auto $rowGutterWidth 1fr $rowGutterWidth auto $rowGutterWidth auto;
		grid-template-areas:
			". header ."
			". . ."
			"date date ."
			"image image image"
			". . ."
			". body ."
			". . ."
			". venues ."
			". . ."
			". organisers .";
		max-width: tokens.$grid-max-width;
		margin-right: auto;
		margin-left: auto;
		@include media.mq($breakpointMid) {
			grid-template-columns: $leftMarginWidth 1.5fr 1fr;
			grid-template-rows: auto $rowGutterWidth auto $rowGutterWidth auto $rowGutterWidth auto 1fr;
			grid-template-areas:
				". header ."
				". . ."
				". body date"
				". body ."
				". body venues"
				". body ."
				". body organisers"
				". body .";
			position: relative;
			&::before {
				@include theme.shade(var(--theme-accent-mod));
				content: "";
				width: $leftMarginTextureWidth;
				height: 100%;
				position: absolute;
				top: 0;
				left: calc(
					#{$leftMarginWidth} - #{$leftMarginTextureWidth} - #{$colGutterWidth}
				);
			}
			#{$self}[data-image-orientation] & {
				grid-template-rows: auto $rowGutterWidth auto $rowGutterWidth auto $rowGutterWidth auto 1fr;
			}
			#{$self}[data-image-orientation="landscape"] & {
				grid-template-areas:
					". header ."
					". . ."
					"image image date"
					". . ."
					". body venues"
					". body ."
					". body organisers"
					". body .";
			}
			#{$self}[data-image-orientation="portrait"] & {
				grid-template-areas:
					". header ."
					". . ."
					". image date"
					". . ."
					". body venues"
					". body ."
					". body organisers"
					". body .";
			}
		}
		@include media.mq($breakpointUpper) {
			grid-template-columns: $leftMarginWidth 2fr 1.25fr;
		}
	}
	&__header {
		grid-area: header;
	}
	&__image {
		grid-area: image;
	}
	&__date {
		grid-area: date;
	}
	&__body {
		grid-area: body;
	}
	&__venues {
		grid-area: venues;
	}
	&__organisers {
		grid-area: organisers;
	}
	// Header
	&__categories {
		position: relative;
		font-size: tokens.$size-small;
		font-style: italic;
		color: var(--theme-accent);
		&::after {
			content: "";
			display: block;
			max-width: 10em;
			height: 0;
			margin-bottom: 1em;
			border-bottom: 0.5em solid var(--theme-accent-mod);
		}
	}
	// Image
	&__image {
		// @include media.mq($breakpointMid) {
		// 	#{$self}[data-image-orientation="portrait"] & {
		// 		margin-left: 0 - $colGutterWidth;
		// 	}
		// }
	}
	// Date
	&__date {
		align-self: start;
		padding: $colGutterWidth;
		position: relative;
		color: var(--theme-background);
		background-color: var(--theme-accent);
		text-align: center;
		@include media.mq($breakpointMid) {
			transform-origin: top left;
			transform: skewY(-6deg);
		}
		&::after {
			content: "";
			display: block;
			width: $rowGutterWidth * 0.8;
			height: $rowGutterWidth;
			position: absolute;
			top: calc(100% - 1px);
			left: 0;
			background-image: linear-gradient(
				126.87deg,
				var(--theme-accent),
				var(--theme-accent) 50%,
				transparent 51%,
				transparent
			);
			background-size: auto 100%;
		}
	}
	// Body
	&__body {
		@include media.mq($breakpointMid) {
			padding-right: $colGutterWidth;
		}
	}
	&__prose {
		max-width: tokens.$measure-default;
	}
	// Organisers
	&__organisers {
	}
	&__organisers-heading {
		padding: 0 $colGutterWidth;
		color: var(--theme-accent);
		line-height: 0.7;
		text-align: right;
	}
	&__organisers-body {
		padding: $colGutterWidth;
		// color: var(--theme-text);
		// background-color: var(--theme-accent-mod);
		border-top: 0.5em solid var(--theme-accent);
		border-left: 0.5em solid var(--theme-accent);
		border-top-left-radius: 3em;
	}
}
